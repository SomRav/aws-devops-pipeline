name: CI/CD Pipeline with DevSecOps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devops-pipeline-app

jobs:
  # Security scanning jobs (non-blocking)
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the pipeline on security issues
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tfsec
      run: |
        # Install tfsec
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Run tfsec with simple output
        cd terraform
        tfsec . --format json --out tfsec-results.json || true
        
        # Show results
        if [ -f tfsec-results.json ]; then
          echo "Security scan completed. Results:"
          cat tfsec-results.json | jq '.results[] | {rule_id: .rule_id, severity: .severity, description: .description}' || true
        fi

  docker-security:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the pipeline on security issues
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t test-app:${{ github.sha }} ./docker

    - name: Run Trivy vulnerability scanner
      run: |
        # Install trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Run trivy scan
        trivy image --format json --output trivy-results.json test-app:${{ github.sha }} || true
        
        # Show summary
        if [ -f trivy-results.json ]; then
          echo "Container security scan completed."
          trivy image --format table test-app:${{ github.sha }} || true
        fi

  # Terraform validation and testing
  terraform-test:
    name: Terraform Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd terraform
        terraform init
        terraform validate

    - name: Run Terratest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      run: |
        cd tests
        go mod tidy
        go test -v -timeout 30m

  # Application testing
  app-test:
    name: Application Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json

    - name: Install dependencies
      run: |
        cd app
        npm install

    - name: Run tests
      run: |
        cd app
        npm test

  # Deploy infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [terraform-test, app-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Apply
      env:
        TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
        TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        TF_VAR_project_name: ${{ secrets.PROJECT_NAME || 'devops-pipeline' }}
        TF_VAR_github_owner: ${{ github.repository_owner }}
        TF_VAR_github_repo: ${{ github.event.repository.name }}
        TF_VAR_allowed_ip_range: ${{ secrets.ALLOWED_IP_RANGE || '0.0.0.0/0' }}
      run: |
        cd terraform
        terraform init
        terraform plan -out=tfplan
        terraform apply tfplan

  # Build and deploy application
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get ECR login token
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build, tag, and push image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} ./docker
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Trigger CodePipeline
      run: |
        # Get the pipeline name from Terraform outputs or use default
        PIPELINE_NAME="devops-pipeline-codepipeline"
        aws codepipeline start-pipeline-execution --name $PIPELINE_NAME
        echo "Started CodePipeline execution for $PIPELINE_NAME"

    - name: Wait for deployment and test
      run: |
        echo "Waiting for application deployment to complete..."
        sleep 60
        
        # Get EC2 instance public IP (this would be from Terraform output in real scenario)
        INSTANCE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=devops-pipeline-instance" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        if [ "$INSTANCE_IP" != "None" ] && [ "$INSTANCE_IP" != "" ]; then
          echo "Testing application at http://$INSTANCE_IP:3000"
          
          # Wait for application to be ready
          for i in {1..10}; do
            if curl -f http://$INSTANCE_IP:3000/health; then
              echo "Application is healthy!"
              break
            else
              echo "Waiting for application... (attempt $i/10)"
              sleep 30
            fi
          done
        else
          echo "Could not determine instance IP"
        fi
